# .github/workflows/windows-ci.yml
name: Windows CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: windows-latest

    strategy:
      matrix:
        powershell-version: ["7.2", "7.3"]

    steps:
      - uses: actions/checkout@v3

      - name: Setup PowerShell
        uses: PowerShell/PowerShell@v1
        with:
          powershell-version: ${{ matrix.powershell-version }}

      - name: Install Dependencies
        shell: pwsh
        run: |
          Install-Module -Name Pester -Force -SkipPublisherCheck
          Install-Module -Name PSScriptAnalyzer -Force
          Install-Module -Name coverlet -Force

      - name: Run Tests with Coverage
        shell: pwsh
        run: |
          $config = New-PesterConfiguration
          $config.Run.Path = "./tests"
          $config.CodeCoverage.Enabled = $true
          $config.CodeCoverage.OutputFormat = 'JaCoCo'
          $config.CodeCoverage.OutputPath = './coverage.xml'
          $config.CodeCoverage.Path = @(
            './WindowsSetup.psm1'
            './lib/**/*.ps1'
          )
          $testResults = Invoke-Pester -Configuration $config -PassThru
          if ($testResults.FailedCount -gt 0) {
            throw "$($testResults.FailedCount) tests failed"
          }

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          fail_ci_if_error: true

      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
          $results = Invoke-ScriptAnalyzer -Path . -Recurse -Settings PSGallery
          $results | Format-Table -AutoSize
          if ($results) {
            throw "PSScriptAnalyzer found issues"
          }

  integration:
    runs-on: windows-latest
    needs: test

    steps:
      - uses: actions/checkout@v3

      - name: Run Integration Tests
        shell: pwsh
        run: |
          $config = New-PesterConfiguration
          $config.Run.Path = "./tests/Integration"
          $config.Run.PassThru = $true
          $results = Invoke-Pester -Configuration $config
          if ($results.FailedCount -gt 0) {
            throw "$($results.FailedCount) integration tests failed"
          }

  release:
    needs: [test, integration]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Build Module
        shell: pwsh
        run: |
          . ./build.ps1

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./out/WindowsSetup.zip
          asset_name: WindowsSetup.zip
          asset_content_type: application/zip
